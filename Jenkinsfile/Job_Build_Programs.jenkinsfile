pipeline {
    agent { label 'master' }
    environment { 
                //Variables Zip Artifacts
                Tipo = "Compress"
                Accion = "zFile"
                PgmPattern = "*"

                //Variables Jfrog
                Project_Name = "Sterling"
                
				//Variables Dinamicas
                
				//FileName
                FileBuild = "${FilenameShells}${BUILD_NUMBER}"
                PgmUtil = "${ComplementShells}/util-compress.sh"
                //Zip
                FileTar = "${FileBuild}.tar"
                FileWorspace = "$WORKSPACE/${FileTar}"
                
                //Variables Jfrog
                TargetBase = "${TargetGeneric}/${Project_Name}"
                FileTarget = "${TargetBase}/${SubProjectNameShells}/${FileTar}"

                //Clean Workspace
                CleanWorkSpace = "rm -rf $WORKSPACE/* && rm -rf $WORKSPACE/.git"
        }
        stages {    
            stage ('Download Artifact') {
                steps {
                        //Show URL Bitbucket for User Jenkins
                        echo "Download Repository ${GIT_URL} Sucessfully!!"
                }
                
            }   
            stage ('Compress Artifact') {
                steps {
                        //Change Permissions WORKSPACE for execute Shells
                        sh 'chmod -R 755 $WORKSPACE/' 
                        //Delete .git not necessary compress Artifacts
                        sh 'rm -rf $WORKSPACE/.git*'
                        //Start Shell Compress Artifacts
                        sh '${PgmUtil} ${PgmZip} ${Tipo} $WORKSPACE $WORKSPACE ${FileTar} ${Accion} "${PgmPattern}"'
                }
                post {
                    success {
                                //Message Sucessfully Compress Artifact
                                echo "Compress Artifact ${FileTar}  Sucessfully"
                            }
                    failure {
                                //Message Failed Compress Artifact
                                echo "Failed Compress Artifact "
                            }
                }
            }
            stage('Upload Artifact Jfrog') {
                steps {
                        rtUpload (
                        buildName: JOB_NAME,
                        buildNumber: BUILD_NUMBER,
                        serverId: Server_ID,
                        spec: '''{
                                "files": [
                                    {
                                        "pattern": "${FileWorspace}",
                                        "target": "${FileTarget}",
                                        "recursive": "false"
                                    }
                                ]
                            }'''
                        )
                    }
                post {
                    success {
                                //Message Sucessfully Upload Artifact
                                echo "Upload Artifact Sucessfully"
                            }
                    failure {
                                //Message Failed Upload Artifact
                                echo "Failed Upload Artifact "
                            }
                }
            }
            stage('Removing files') {
                steps {
                         //Clean Workspace
                         sh '$CleanWorkSpace'
                      }
                post {
                    success {
                                //Message Sucessfully Cleanup Enviroment 
                                echo "Cleanup Enviroment Sucessfully"
                            }
                    failure {
                                //Message Failed Cleanup Enviroment 
                                echo "Failed Cleanup Enviroment "
                            }
                }   
            }
            stage('End Build Sterling') {
                steps {
                        //Message End Pipeline succesfully Deploy
                        echo 'Bye'
                }
            }

    }
}