pipeline {
    agent { label 'master' }
    environment {
            //Receive Variables
            UriGit = "${AntUriGit}"
            UserIDGit = "${AntUserIDGit}"
            BrachGit = "${AntBrachGit}"
            PgmPattern = "${AntPgmPattern}"
            Accion = "${AntAccion}"
            Tipo = "${AntTipo}"
            TmpWokJobMasterRepos = "${AntTmpWokJobMasterRepos}"

            //Variable Fixed
            FileTarShells = "${FilenameShells}*.tar"
            Tag_Branch_Shell = "$WORKSPACE/${PgmSh}/${ComplementShells}/${Tag_Branch}"

            //Variables de Shells
            PathFolderVars = "${PgmSh}/${FolderVars}"
            VarSh = "${PgmSh}/${ComplementShells}/${BashVars}"
            PattStablePoint = "${Stable_Point}"

            //Clean Workspace
            CleanWorkSpace = "rm -rf $WORKSPACE/* && rm -rf $WORKSPACE/.git"
        }
        stages {
            stage('Checkout Artifacts'){
            steps {
                script {
                            //Chckout Repository Especific Pipeline Master 
                            checkout([$class: 'GitSCM', branches: [[name: "*/${BrachGit}"]], doGenerateSubmoduleConfigurations: false, 
                            extensions: [[$class: 'CloneOption', timeout: 30, noTags: false, shallow: true]]
                                        +[[$class: 'LocalBranch', localBranch: '']]
                                        +[[$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: false]],
                            submoduleCfg: [], userRemoteConfigs: [
								[credentialsId: UserIDGit, url: UriGit]]])           
                    }
                }
                post {
                    success {
                                //Message Sucessfully Checkout Artifacts
                                echo "Sucessfully Checkout Repositorio Bitbucket ${UriGit}"
                            }
                    failure {
                                //Message Failed Checkout Artifacts
                                echo "Failed Checkout Artifacts"
								//Clean Workspace
                                sh 'rm -rf $WORKSPACE/*'
                    }
                }
            }
            stage("Variables") {
            steps {
                script {
                    //Extrac URL Bitbucket After @ 
                    env.ComUriGit1 = UriGit.substring(0,UriGit.indexOf('/')+2)
                    //Extrac URL Bitbucket Befero 
                    env.ComUriGit2 = UriGit.substring(UriGit.indexOf('/')+2)
                    //Concat @Complemet URL Bitbucket
                    env.TemUriGit2 = "@${ComUriGit2}"
                    //Correcion Permisos Folder Shell
                    sh 'chmod -R 700 $WORKSPACE/${PgmSh}'

                    //Obtain change Number Git Log
                    env.Change_number = sh(script: 'git log --oneline | grep -F -m 1 "feature/C"| sed "s/.*feature\\/\\(C[0-9]*\\).*/\\1/"', returnStdout: true).trim() 
                    }
                }
				post {
                    success {
                                //Message Sucessfully Obtain Change Number and URL Bitbucket
                                echo "Sucessfully Obtain feature: ${Change_number} and URL Bitbucket ${env.TemUriGit2}"
                            }
                    failure {
                                //Message Failed URL birbucket
                                echo "Verified URL Bitbucket ${env.TemUriGit2} range : -1"
								//Clean Workspace
                                //sh '$CleanWorkSpace'
                    }
                }
            }
            stage ('Diff Artifact') {
			steps {
                
                //Verificar Workspace
                sh ('ls $WORKSPACE')

                //Obatin Credentials User and passwor User conetionn Bitbucket
				withCredentials([usernamePassword(credentialsId: 'UserBitbucketSterling', passwordVariable: 'PasswordGit', usernameVariable: 'UserBitSterling')]){
				script {
                        //Concat Complement URL Bitbucket and User
						env.TemUriGit1 = "${ComUriGit1}${UserBitSterling}"
                        //Show Variable Primary Path URL Bitbucket
                        sh ('echo TemUriGit1 : ${TemUriGit1}')
                        //Show Variable Point Stable
                        sh ('echo PattStablePoint : ${PattStablePoint}')

                        //Start Shell Diff Artifacts and Tag Brach and List Artifacts
						sh ('$Tag_Branch_Shell $WORKSPACE "$Change_number" "${TemUriGit1}" "${TemUriGit2}" "${PasswordGit}" "${PattStablePoint}"')
						
						}
					}
				}
				post {
					success {
								//Message Sucessfully Diff Artifact
                                echo "Sucessfully Diff Artifact}"
							}
					failure {
								//Message Failed Diff Artifact
                                echo "Failed Step Diff Artifact"
                                //Clean Workspace
                                sh '$CleanWorkSpace'
					}
                }
            }
            stage ('Compress Artifact') {
                steps {
                    script {
                        //Show file Change_number folder Vars
                        env.Tag_name = sh (script: 'cat $WORKSPACE/$PathFolderVars/$Change_number', returnStdout: true).trim() 
                        //Concat ChangeNumer-TagName
                        env.FileBuild = "${Filename_Artifact}${Tag_name}" //Artifact_C1232154-2
                        //Show variable FileBuild validate
                        sh 'echo FileBuild: $FileBuild'

                        //Filen Name Artifact upload y deploy Sterling
                        env.FileTar = "${env.FileBuild}.tar" //Artifact_C1232154-2.tar
                        sh 'echo FileTar: $FileTar'

                        //Varibale Programa Zip
                        env.PgmUtil = "./${Util}"

                        //Permisions Folder Programs
                        sh ("chmod -R 755 $WORKSPACE/${PgmSh}")

                        //Compress Artifact
                        sh ("${PgmUtil} ${PgmZip} ${Tipo} $WORKSPACE/${env.Change_number} $WORKSPACE ${FileTar} ${Accion} ${PgmPattern}")

                        //Move Artifat WORKSPACE
                        sh ("mv $WORKSPACE/${env.Change_number}/${FileTar} $WORKSPACE/")

                        //Carte Folder Variables Temporary
						sh ("mkdir -p ${TmpWokJobMasterRepos}/${PathFolderVars}")

                        //Start Shell Compress File Artifact
                        sh ("$WORKSPACE/${VarSh} ${TmpWokJobMasterRepos} ${PathFolderVars} ${VarName} ${env.FileTar}")

                        //Show Existe File Compress
                        sh 'cat ${TmpWokJobMasterRepos}/$PathFolderVars/$VarName'
                    }
                }
                post {
                    success {
                                //Message Sucessfully File: ${FileTar}
                                echo "Compress Artifact Sucessfully File: ${FileTar}"
                            }
                    failure {
                                //Message Failed Compress Artifact 
                                echo "Failed Compress Artifact "
								//Clean Workspace
                                sh '$CleanWorkSpace'
                    }
                }
            }
            stage ('Removing files') {
                steps {
                    script
                        { 
                            //Clean WORKSPACE Job
                            sh 'rm -rf $WORKSPACE/ACCOUNT_PERMISSION/'
							sh 'rm -rf $WORKSPACE/BUSINESS_PROCESS/'
                            sh 'rm -rf $WORKSPACE/ADAPTERS/'
                            sh 'rm -rf $WORKSPACE/GROUPS/'
                            sh 'rm -rf $WORKSPACE/OBSCUR*'
                            sh 'rm -rf $WORKSPACE/COD*'
                            sh 'rm -rf $WORKSPACE/XSLT/'
                            sh 'rm -rf $WORKSPACE/SSH_PROFILES/'
                            sh 'rm -rf $WORKSPACE/TEMPLATES/'
                            sh 'rm -rf $WORKSPACE/SCHEDULES/'
                            sh 'rm -rf $WORKSPACE/ROUTING_CHANNELS/'
                            sh 'rm -rf $WORKSPACE/PARTN*' 
                            sh 'rm -rf $WORKSPACE/ADAPTERS/'
                            sh 'rm -rf $WORKSPACE/ACCOUNTS_PERMISSION/'
                            sh 'rm -rf $WORKSPACE/*.md'
                            sh 'rm -rf $WORKSPACE/*.git'
							sh 'rm -rf $WORKSPACE/*.txt'
                            sh 'rm -rf $WORKSPACE/${Change_number}/'
                    }                            
                }
                post {
                    success {
                             //Message Cleanup Enviroment Sucessfully
                            echo "Cleanup Enviroment Sucessfully"
                            }
                    failure {
                            //Message Failed Cleanup Enviroment 
                            echo "Failed Cleanup Enviroment "
                    }
                }
            }

    }
    
}